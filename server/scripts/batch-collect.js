require('dotenv').config();const TechFrameworkDB = require('../src/index');async function batchCollectFrameworks() {  const db = new TechFrameworkDB();  await db.initialize();  // Popular frameworks to collect  const frameworksToCollect = [    // Frontend    { name: 'React', category: 'frontend', githubUrl: 'https://github.com/facebook/react' },    { name: 'Vue.js', category: 'frontend', githubUrl: 'https://github.com/vuejs/vue' },    { name: 'Angular', category: 'frontend', githubUrl: 'https://github.com/angular/angular' },    { name: 'Svelte', category: 'frontend', githubUrl: 'https://github.com/sveltejs/svelte' },        // Backend    { name: 'Express.js', category: 'backend', githubUrl: 'https://github.com/expressjs/express' },    { name: 'Fastify', category: 'backend', githubUrl: 'https://github.com/fastify/fastify' },    { name: 'Django', category: 'backend', githubUrl: 'https://github.com/django/django' },    { name: 'Flask', category: 'backend', githubUrl: 'https://github.com/pallets/flask' },    { name: 'Spring Boot', category: 'backend', githubUrl: 'https://github.com/spring-projects/spring-boot' },        // Full-stack    { name: 'Next.js', category: 'fullstack', githubUrl: 'https://github.com/vercel/next.js' },    { name: 'Nuxt.js', category: 'fullstack', githubUrl: 'https://github.com/nuxt/nuxt.js' },    { name: 'Remix', category: 'fullstack', githubUrl: 'https://github.com/remix-run/remix' },        // Mobile    { name: 'React Native', category: 'mobile', githubUrl: 'https://github.com/facebook/react-native' },    { name: 'Flutter', category: 'mobile', githubUrl: 'https://github.com/flutter/flutter' },        // Database    { name: 'MongoDB', category: 'database', githubUrl: 'https://github.com/mongodb/mongo' },    { name: 'PostgreSQL', category: 'database', githubUrl: 'https://github.com/postgres/postgres' },    { name: 'Redis', category: 'database', githubUrl: 'https://github.com/redis/redis' },  ];  console.log(`🚀 Starting batch collection of ${frameworksToCollect.length} frameworks...`);    const results = await db.bulkProcessFrameworks(frameworksToCollect);    console.log('\n📈 Batch Collection Results:');  console.log(`✅ Successful: ${results.filter(r => r.success).length}`);  console.log(`❌ Failed: ${results.filter(r => !r.success).length}`);    // Show top frameworks by overall score  const successful = results.filter(r => r.success);  if (successful.length > 0) {    const topFrameworks = successful      .sort((a, b) => b.framework.getOverallScore() - a.framework.getOverallScore())      .slice(0, 5);        console.log('\n🏆 Top 5 Frameworks by Overall Score:');    topFrameworks.forEach((result, index) => {      const f = result.framework;      console.log(`${index + 1}. ${f.name} (${f.category}) - Score: ${f.getOverallScore()}`);      console.log(`   Performance: ${f.performanceScore}, Scalability: ${f.scalabilityScore}, Community: ${f.communityScore}`);    });  }  console.log('\n🎉 Batch collection completed!');}batchCollectFrameworks().catch(console.error);