version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stackbuilder-postgres
    environment:
      POSTGRES_DB: stackbuilder
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python AI API
  python-api:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: stackbuilder-python-api
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - PINECONE_API_KEY=${PINECONE_API_KEY:-}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stackbuilder
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy

  # Node.js Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: stackbuilder-backend
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/stackbuilder
      - PYTHON_API_URL=http://python-api:5000
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      postgres:
        condition: service_healthy
      python-api:
        condition: service_healthy

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: stackbuilder-frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:4000
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:

networks:
  default:
    driver: bridge